# Docker Compose para Entorno de Desarrollo
# Incluye todas las herramientas de desarrollo y testing

services:
  # PostgreSQL Database (Desarrollo)
  db:
    image: postgres:15-alpine
    env_file:
      - .env.development
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5432:5432"  # Expuesto para acceso desde host
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mac_user -d mac_attendance"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Django (Desarrollo)
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend.dev
    command: >
      sh -c "python manage.py migrate &&
             python init_db.py &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - .env.development
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8000"
    stdin_open: true  # Para ipdb y debugging interactivo
    tty: true

  # Frontend React + Nginx (HTTP sin SSL para desarrollo local)
  nginx:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "80:80"  # HTTP para desarrollo (sin SSL)
    volumes:
      - ./docker/nginx.dev.conf:/etc/nginx/conf.d/default.conf  # Configuraci√≥n sin SSL
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  static_volume:
  media_volume:
  postgres_data_dev:
